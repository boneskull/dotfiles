cite about group param example

function is-darwin {
  about 'asserts current OS is Darwin, for chaining commands'
  group 'shell'
  if [[ `uname` == Darwin ]]; then
    return 0
  else
    return 1
  fi
}

function update-composure {
  curl -L http://git.io/composure > ${DOTFILES}/.composure
  cd ${DOTFILES} && git add .composure
  cd -
}

function mkd {
  about 'mkdir and enter it'
  group 'util'
  mkdir -p "$@" && cd "$@";
}

function archive {
  about 'archive a directory to the BACKUP_DIR or PWD'
  group 'util'
  local BACKUP_DIR=${BACKUP_DIR:-$(pwd)}
  local DIRS=$@

  for DIR in ${DIRS}; do
    if [[ -d ${DIR} ]]
    then
      if [[ -e ${DIR}/package.json ]]
      then
        echo "Archiving npm module ${DIR}..."
        npm pack "${DIR}" && rm -frv "${DIR}"
      else
        echo "Archiving ${DIR}..."
        local DATE=`slug "$(date '+%Y-%m-%d %H:%M:%S')"`
        tar cvzf "${BACKUP_DIR}/`slug ${DIR}`-${DATE}.tar.gz" ${DIR} && rm -frv "${DIR}"
      fi
    else
      echo "Skipping non-directory ${DIR}..."
    fi
  done
}

# Determine size of a file or total size of a directory
function fs {
  about 'determine size of file or total size of dir'
  group 'util'
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

function serve {
  about 'start simple HTTP server in directory'
  param '1: port'
  group 'dev'
  local port="${1:-8000}";
  python -m SimpleHTTPServer
}

function e {
  about 'open file or current directory with EDITOR'
  group 'dev'
  if [ $# -eq 0 ]; then
    ${EDITOR} .;
  else
    ${EDITOR} "$@";
  fi;
}

function o {
  about 'open file or current directory'
  group 'shell'
  ! exists open && {
    return 1
  }
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

function source-dirname {
  about 'echo dirname of currently running script'
  group 'shell'
  local SOURCE="${BASH_SOURCE[0]}"
  local DIR
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the
    # symlink file was located
    [[ ${SOURCE} != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}

 # http://stackoverflow.com/questions/296536/urlencode-from-a-bash-script
 # this enables to search multiple strings; "man git fetch" will find the "git" page and search for
 # "fetch" within
 function encodeuri {
    about 'encodes URI'
    group 'dev'
    local string="${@}"
    local strlen=${#string}
    local encoded=""

    for (( pos = 0; pos < strlen; pos ++ )); do
      c=${string:$pos:1}
      case "$c" in
        [-_.~a-zA-Z0-9]) o="${c}" ;;
        *) printf -v o '%%%02x' "'$c"
      esac
      encoded+="${o}"
    done
    echo "${encoded}"
}

function man {
  about 'opens man pages in Dash.app'
  group 'osx'

  if [[ -d /Applications/Dash.app && \
    -d "$HOME/Library/Application Support/Dash/DocSets/Man_Pages" ]]; then
    open dash://manpages:`encodeuri ${@}`
  else
    /usr/bin/man $@
  fi
}

function install-npm-packages {
  about 'installs global npm packages'
  group 'install'
  if exists npm; then
    for PACKAGE in `cat ${HOME}/.init/npm-packages.txt`; do
      /usr/bin/env npm install -g ${PACKAGE}
    done
  else
    return 1
  fi
}

function install-homebrew {
  about 'installs homebrew'
  group 'install'
  if is-darwin; then
    /usr/bin/env ruby -e \
      "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
  else
    return 1
  fi
}

function exists {
  about 'kinda like which'
  group 'shell'
  if [[ -z $1 ]]; then
    return 1
  elif command -v $1 > /dev/null; then
    return 0
  else
    return 1
  fi
}

function install-homebrew-packages {
  about 'installs homebrew packages as defined in ~/.init/brew-packages.txt'
  group 'install'

  is-darwin && {
    ! exists brew && {
      install-homebrew
    }

    brew update
    brew upgrade
    for PACKAGE in `cat ${HOME}/.init/brew-packages.txt`; do
      brew install "${PACKAGE}"
    done
    brew cleanup
  }
}

function install-cask-packages {
  about 'installs homebrew-cask packages as defined in ~/.init/cask-packages.txt'
  group 'install'
  is-darwin && {
    ! exists brew && {
      install-homebrew
    }
    [[ -z `brew ls brew-cask` ]] && {
      brew install caskroom/cask/brew-cask
    }

    tap caskroom/versions

    for PACKAGE in `cat ${HOME}/.init/cask-packages.txt`; do
      brew cask install "${PACKAGE}"
    done

    [[ `brew cask ls alfred` ]] && brew cask alfred link
  }
}

function install-osx {
  about 'installs osx defaults'
  group 'install'
  is-darwin && bash ${HOME}/.osx
}

function down4me {
  about 'checks whether a website is down for you, or everybody'
  param '1: website url'
  example '$ down4me http://www.google.com'
  group 'net'
  if [[ `curl -s http://isup.me/$1 | grep -i 'not just you'` ]]; then
    echo "It's jacked."
  else
    echo "Just you."
  fi
}

function all-groups() {
  about 'displays all unique metadata groups'
  group 'meta'

  typeset func
  typeset file=$(mktemp /tmp/composure.XXXX)
  for func in $(_typeset_functions)
  do
    typeset -f $func | metafor group >> $file
  done
  cat $file | sort | uniq
  rm $file
}

function reinstall {
  about 'reinstalls dotfiles'
  group 'install'
  source ${DOTFILES}/bootstrap.bash -f
  reload
}

function editorconfig {
  about 'installs .editorconfig into current directory'
  group 'install'
  cp -iv ${HOME}/.editorconfig .
}

function p {
  about 'shortcut to projects dir; accepts a param'
  group 'shell'
  [[ ${1} ]] && {
    cd "${HOME}/projects/${1}"
    return
  }
  cd "${HOME}/projects"
}

function update-vundle {
  about 'pulls latest Vundle from repo'
  group 'install'
  rm -rf ${HOME}/.vim/bundle/Vundle.vim
	git clone https://github.com/gmarik/Vundle.vim.git ${HOME}/.vim/bundle/Vundle.vim
	vim +PluginInstall +qall
}

cite about group param example

function is-darwin {
  about 'asserts current OS is Darwin, for chaining commands'
  group 'shell'
  if [[ `uname` == Darwin ]]; then
    return 0
  else
    echo "${bold}${red}This function only available on Mac OS X${reset}"
    return 1
  fi
}

function update-composure {
  curl -L http://git.io/composure > ${DOTFILES}/.composure
  cd ${DOTFILES} && git add .composure
  cd -
}

function mkd() {
  about 'mkdir and enter it'
  group 'util'
  mkdir -p "$@" && cd "$@";
}

function archive()
{
  about 'archive a directory to the BACKUP_DIR or PWD'
  group 'util'
  local BACKUP_DIR=${BACKUP_DIR:-$(pwd)}
  local DIRS=$@
  local DATE=`slug "$(date"+%Y-%m-%d %H:%M:%S")"`
  for DIR in ${DIRS}; do
    if [[ -d ${DIR} ]]; then
      [[ -d ${DIR}/node_modules ]] && {
        rm -rf "${DIR}/node_modules"
      }
      tar cvzf "${BACKUP_DIR}/`slug${DIR}`-${DATE}.tar.gz" ${DIR} && rm -frv "${DIR}"
    else
      echo "Skipping non-directory ${DIR}..."
    fi
  done
}

# Determine size of a file or total size of a directory
function fs() {
  about 'determine size of file or total size of dir'
  group 'util'
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

function server() {
  about 'start simple HTTP server in directory'
  param '1: port'
  group 'dev'
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

function e() {
  about 'open file or current directory with EDITOR'
  group 'dev'
  if [ $# -eq 0 ]; then
    ${EDITOR} .;
  else
    ${EDITOR} "$@";
  fi;
}

function o() {
  about 'open file or current directory'
  group 'shell'
  ! exists open && {
    return 1
  }
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

function source-dirname {
  about 'echo dirname of currently running script'
  group 'shell'
  local SOURCE="${BASH_SOURCE[0]}"
  local DIR
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}

 # http://stackoverflow.com/questions/296536/urlencode-from-a-bash-script
    # this enables to search multiple strings; "man git fetch" will find the "git" page and search for "fetch" within
 function encodeuri {
    about 'encodes URI'
    group 'dev'
    local string="${@}"
    local strlen=${#string}
    local encoded=""

    for (( pos = 0; pos < strlen; pos ++ )); do
      c=${string:$pos:1}
      case "$c" in
        [-_.~a-zA-Z0-9]) o="${c}" ;;
        *) printf -v o '%%%02x' "'$c"
      esac
      encoded+="${o}"
    done
    echo "${encoded}"
}

function man {
  about 'opens man pages in Dash.app'
  group 'osx'
  /usr/bin/open dash://${DASH_MAN_DOCSET}:`encodeuri ${@}`
}

function setup-dash-man {
  about 'sets up man->Dash config'
  group 'install'
  # To override the DocSet shortcut Man Pages name, export DASH_MAN_DOCSET somewhere.
  DASH_MAN_DOCSET=${DASH_MAN_DOCSET-manpages}

  if ! is-darwin || [[ ! -d /Applications/Dash.app ]] || \
    [[ ! -d "$HOME/Library/Application Support/Dash/DocSets/Man_Pages" ]]; then
    unset man
    return 1
  fi
}
setup-dash-man


function install-npm-packages {
  about 'installs global npm packages'
  group 'install'
  if exists npm; then
    for PACKAGE in `cat ${DOTFILES}/init/npm-packages.txt`; do
      sudo /usr/bin/env npm install -g ${PACKAGE}
    done
  else
    return 1
  fi
}

function install-homebrew {
  about 'installs homebrew'
  group 'install'
  if is-darwin; then
    /usr/bin/env ruby -e \
      "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
  else
    return 1
  fi
}

function exists {
  about 'kinda like "which" except for use with test'
  group 'shell'
  if [[ -z $1 ]]; then
    return 1
  elif [[ `command -v $1` ]]; then
    return 0
  else
    return 1
  fi
}

function install-homebrew-packages {
  about 'installs homebrew packages as defined in ~/.init/brew-packages.txt'
  group 'install'

  is-darwin && {
    ! exists brew && {
      install-homebrew
    }

    brew update
    brew upgrade
    for PACKAGE in `cat ${DOTFILES}/init/brew-packages.txt`; do
      brew install "${PACKAGE}"
    done
    brew cleanup
  }
}

function install-cask-packages {
  about 'installs homebrew-cask packages as defined in ~/.init/cask-packages.txt'
  group 'install'
  is-darwin && {
    ! exists brew && {
      install-homebrew
    }
    [[ -z `brew ls brew-cask` ]] && {
      brew install caskroom/cask/brew-cask
    }

    tap caskroom/versions

    for PACKAGE in `cat ${DOTFILES}/init/cask-packages.txt`; do
      brew cask install "${PACKAGE}"
    done

    [[ `brew cask ls alfred` ]] && brew cask alfred link
  }
}

function install-osx {
  about 'installs osx defaults'
  group 'install'
  is-darwin && bash ${HOME}/.osx
}

function license {
  about 'creates an MIT "LICENSE" file in the current directory'
  param "-y year"
  param "-a author"
  group 'dev'
  exists license-mit && /usr/bin/env license-mit create $@
}

function down4me()
{
  about 'checks whether a website is down for you, or everybody'
  param '1: website url'
  example '$ down4me http://www.google.com'
  group 'net'
  curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'
}

function myip()
{
  about 'displays your ip address, as seen by the Internet'
  group 'net'
  res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
  echo -e "Your public IP is: ${bold}${green}$res${reset}"
}


function all-groups ()
{
  about 'displays all unique metadata groups'
  group 'meta'

  typeset func
  typeset file=$(mktemp /tmp/composure.XXXX)
  for func in $(_typeset_functions)
  do
    typeset -f $func | metafor group >> $file
  done
  cat $file | sort | uniq
  rm $file
}


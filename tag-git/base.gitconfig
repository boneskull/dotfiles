[alias]
# a nice log
l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

# fetch
fet = fetch

# checkout
g = checkout

# View the current working tree status using the short format
s = status -s

# Clone a repository including all submodules
c = clone --recursive

# Commit all changes
ca = !"git add -A && git commit -av"

# Switch to a branch, creating it if necessary
go = "!f() { git checkout -b \"$1\" 2> /dev/null && { echo "Created $1"; } || { git switch \"$1\" || { git stash save --include-untracked && git switch \"$1\" && git stash pop; } } }; f"

# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch -a
remotes = remote -v

# Amend the currently staged files to the latest commit
amend = commit --amend --reuse-message=HEAD

# List contributors with number of commits
contributors = shortlog --summary --numbered

# commit
ci = commit

# fork
fork = !"gh repo fork --remote"

# new pr
pr = !"gh pr create --fill"

# checkout pr by number
checkout-pr = "!f() { gh pr checkout $1 }; f"

# echo default branch on origin
default-branch = !"f() { REMOTE=${1:-origin}; git rev-parse --abbrev-ref \"${REMOTE}/HEAD\" | cut -c8-; }; f"

# deletes local renovate branches
cleanup-renovate = !"f() { git branch --list \"renovate/*\" | xargs -r git branch -D; }; f"

[apply]
# Detect whitespace errors when applying a patch
whitespace = fix

[core]
# Use custom `.gitignore` and `.gitattributes`
excludesfile = ~/.gitignore_global
attributesfile = ~/.gitattributes
# Treat spaces before tabs and all kinds of trailing whitespace as an error
# [default] trailing-space: looks for spaces at the end of a line
# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
whitespace = space-before-tab,-indent-with-non-tab,trailing-space
trustctime = false
quotepath = false
precomposeUnicode = true

[branch]
autoSetupRebase = remote

[fetch]
prune = true

[rebase]
autoStash = true
stat = true

[color]
# Use colors in Git commands that are capable of colored output when
# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
ui = auto

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold # line info
old = red           # deletions
new = green         # additions

[color "status"]
added = yellow
changed = green
untracked = cyan

[diff]
# Detect copies as well as renames
# renames = copies
tool = opendiff

[difftool]
prompt = false

[merge]
tool = opendiff
# Include summaries of merged commits in newly created merge commit messages
log = true

[mergetool]
prompt = false

[help]
# Automatically correct and execute mistyped commands
autocorrect = 1

[push]
default = current

[filter "media"]
clean = git-media-clean %f
smudge = git-media-smudge %f

[user]
name = Christopher Hiller
email = boneskull@boneskull.com
signingkey = 362F2068120949CE
branchPrefix = boneskull

[commit]
gpgsign = true

[filter "lfs"]
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true
clean = git-lfs clean -- %f

[init]
defaultBranch = main

[advice]
skippedCherryPicks = false
mergeConflict = false

[absorb]
autoStageIfNothingStaged = true

[remote "origin"]
	prune = true

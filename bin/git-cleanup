#!/usr/bin/env zsh

# git-cleanup: A script to clean up local and remote branches in a Git
# repository.
#
# Usage: git cleanup [remote] [target] [prefix]
#
#  - remote: The remote repository (default: 'origin').
#  - target: The target branch to check against (default: the default branch of
#    the remote).
#  - prefix: The prefix for remote branches to consider (default:
#    user.branchPrefix config value or 'boneskull'); e.g., prefix 'boneskull'
#    will match branches like 'boneskull/feature-xyz'.
#
# To set the branch prefix globally, use `git config --global user.branchPrefix
# <prefix>` (without trailing slash)
#
# WARNING: not compatible with bash.

set -euo pipefail

default_prefix='boneskull'

log() {
  print -P "$@" >&2
}

ok() {
  log "%F{green}✓%f $@"
}

warn() {
  log "%F{yellow}⚠%f $@"
}

info() {
  log "%F{blue}ℹ%f $@"
}

error() {
  log "%F{red}✗%f $@"
  exit 1
}

em() {
  echo "%F{yellow}$@%f"
}

bold() {
  echo "%F{red}$@%f"
}

# Gets the branch prefix from git config or uses the default.
get_prefix() {
  local prefix=$(git config get user.branchPrefix)
  if [[ -z $prefix ]]; then
    echo $default_prefix
  else
    echo $prefix
  fi
}

# Checks that the target branch exists on the remote.
check_target() {
  if ! git show-branch "${remote}/${target}" > /dev/null 2>&1; then
    error "No such branch: $(em "${remote}/${target}")"
  fi
}

# Determines the default branch of the remote repository
default_branch() {
  echo $(git rev-parse --abbrev-ref "${remote}/HEAD" | cut -c8-)
}

# Prompts the user for confirmation with a default response.
confirm() {
  local message="${1}"
  local default="${2:-N/y}"
  print -Pn "${message} "
  read -q "confirm?[${default}]? "
  echo
  if [[ ${confirm} =~ ^[Yy]$ ]]; then
    return 0
  else
    return 1
  fi
}

# Removes local branches that have been rebased onto the target branch
cleanup_local_rebased() {
  local deleted=false
  local branches=($(git branch --list "${prefix}/*" --format='%(refname:short)'))
  if [[ -z $branches ]]; then
    info "No local branches found matching $(em "${prefix}/*")."
    return
  fi

  for branch in $branches; do
    local cherry=$(git cherry "${remote}/${target}" "${branch}")
    if [[ -n $cherry && ! $cherry =~ '^\+' ]]; then
      info "Local branch $(bold "${branch}") appears in $(em "${remote}/${target}")."
      confirm "Delete local branch $(bold "${branch}")" && {
        git branch -D "${branch}"
        deleted=true
      }
    fi
  done
  if [[ $deleted == true ]]; then
    ok "Deleted local branch(es) that have been rebased onto $(em "${remote}/${target}")."
  else
    info "Did not remove any local branches."
  fi
}

# Removes remote branches that have been rebased onto the target branch
cleanup_remote_rebased() {
  local deleted=false
  local branches=($(git branch -r --list "${remote}/${prefix}/*" --format='%(refname:lstrip=3)'))
  if [[ -z $branches ]]; then
    info "No remote branches found matching ${remote}/${prefix}*."
    return
  fi
  for branch in $branches; do
    if [[ -z $(git cherry "${remote}/${target}" "${remote}/${branch}" 2> /dev/null | grep '^+') ]]; then
      info "Remote branch $(bold "${remote}/${branch}") appears in $(em "${remote}/${target}")."
      confirm "Delete remote branch $(bold "${remote}/${branch}")" && {
        git push "${remote}" --delete "${branch}"
        deleted=true
      }
    fi
  done
  if [[ $deleted == true ]]; then
    ok "Deleted remote branch(es) that have been rebased onto $(em "${remote}/${target}")."
  else
    info "Did not remove any remote branches."
  fi
}

# Remote repository
remote=${1:-origin}
# "Trunk" branch on remote repository
target=${2:-$(default_branch)}
# Branch prefix
prefix=${3:-$(get_prefix)}

info "Using remote: $(em "${remote}"), trunk $(em "${target}"), and prefix $(em "${prefix}")."

# this will remove local branches that track deleted remote branches
git fetch --prune "${remote}"

check_target
cleanup_local_rebased
cleanup_remote_rebased

ok "Done."
